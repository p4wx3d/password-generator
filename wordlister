#!/usr/bin/env python3

import itertools
import string

def print_banner():

    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    BLUE = "\033[34m"
    MAGENTA = "\033[35m"
    CYAN = "\033[36m"
    RESET = "\033[0m"

    print()
    print(f"{YELLOW}                     coded by: p4wx3d                               {RESET}")
    print(f"{CYAN}                                        █████ ████   ███           █████                      {RESET}")
    print(f"{CYAN}                                       ░░███ ░░███  ░░░           ░░███                       {RESET}")
    print(f"{GREEN} █████ ███ █████  ██████  ████████   ███████  ░███  ████   █████  ███████    ██████  ████████ {RESET}")
    print(f"{GREEN}░░███ ░███░░███  ███░░███░░███░░███ ███░░███  ░███ ░░███  ███░░  ░░░███░    ███░░███░░███░░███{RESET}")
    print(f"{GREEN} ░███ ░███ ░███ ░███ ░███ ░███ ░░░ ░███ ░███  ░███  ░███ ░░█████   ░███    ░███████  ░███ ░░░ {RESET}")
    print(f"{GREEN} ░░███████████  ░███ ░███ ░███     ░███ ░███  ░███  ░███  ░░░░███  ░███ ███░███░░░   ░███     {RESET}")
    print(f"{GREEN}  ░░████░████   ░░██████  █████    ░░████████ █████ █████ ██████   ░░█████ ░░██████  █████    {RESET}")
    print(f"{CYAN}   ░░░░ ░░░░     ░░░░░░  ░░░░░      ░░░░░░░░ ░░░░░ ░░░░░ ░░░░░░     ░░░░░   ░░░░░░  ░░░░░     {RESET}")
    print(f"{CYAN}                                                                                               {RESET}")
    print(f"{CYAN}                                                                                               {RESET}")

def print_message():
    MAGENTA = "\033[35m"
    RESET = "\033[0m"
    print("\n")
    print(f"{MAGENTA}Don't go crazy in longer passwords unless you have a quantum computer XD{RESET}")
    print("\n")

def normalize_base_words(base_words):
    normalized_words = set()
    for word in base_words:
        word = word.strip()
        normalized_words.add(word.lower())
        normalized_words.add(word.upper())
        normalized_words.add(word.capitalize())
    return normalized_words

def calculate_expected_count(base_words, min_length, max_length, symbols=''):
    total_count = 0
    num_digits = len(string.digits)
    num_symbols = len(symbols)

    for base in base_words:
        base_len = len(base)
        for length in range(min_length, max_length + 1):
            if base_len <= length:
                num_combinations = num_digits ** (length - base_len)
                for i in range(1, length - base_len + 1):
                    total_count += num_combinations * (num_symbols ** i)

                total_count += num_combinations
                total_count += 2 * num_symbols 
                total_count += num_digits * (num_symbols ** (length - 1))

    return total_count

def generate_wordlist(base_words, min_length, max_length, symbols=''):
    wordlist = set()

    for base in base_words:
        base_len = len(base)
        for length in range(min_length, max_length + 1):
            if base_len <= length:
                for num_combination in itertools.product(string.digits, repeat=length - base_len):
                    num_combination = ''.join(num_combination)
                    wordlist.add(base + num_combination)
                    wordlist.add(num_combination + base)

                    for symbol in symbols:
                        wordlist.add(base + num_combination + symbol)
                        wordlist.add(symbol + base + num_combination)
                        wordlist.add(num_combination + symbol + base)
                        wordlist.add(base + symbol + num_combination)

                for symbol in symbols:
                    wordlist.add(base + symbol)
                    wordlist.add(symbol + base)

                for i in range(length):
                    for num in string.digits:
                        for symbol in symbols:
                            if i == 0:
                                wordlist.add(num + base)
                                wordlist.add(symbol + base)
                            else:
                                wordlist.add(base[:i] + num + base[i:])
                                wordlist.add(base[:i] + symbol + base[i:])
                                wordlist.add(base[:i] + num + symbol + base[i:])

    return {word for word in wordlist if min_length <= len(word) <= max_length}

def main():
    print_banner()
    
    print_message()

    base_words_input = input("Enter base words (comma separated): ")
    base_words = normalize_base_words(base_words_input.split(','))

    min_length = int(input("Enter minimum length of combinations: "))
    max_length = int(input("Enter maximum length of combinations: "))

    symbols_input = input("Enter symbols (e.g., !@#$%, or leave blank): ")
    symbols = symbols_input if symbols_input else ''

    wordlist = generate_wordlist(base_words, min_length, max_length, symbols)

    with open('generated_wordlist.txt', 'w') as f:
        for word in sorted(wordlist):
            f.write(f"{word}\n")

    print(f"Generated {len(wordlist)} words.")

if __name__ == "__main__":
    main()
